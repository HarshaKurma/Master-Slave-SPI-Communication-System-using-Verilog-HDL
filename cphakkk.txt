module cphakkk(
    input wire clk,
    input wire rst,
    input wire tx_enable,
    output reg mosi,
    output reg cs,
    output wire sclk
);


wire cpol=1;
wire cpha = 0;
reg [7:0] tx_data = 8'b11101111;
reg [2:0] bit_count = 3'b111;
reg [7:0] tx_data_t;
reg [2:0] state=0;
integer count = 0;
integer start=0;
reg [1:0]sccount=0;
reg s=1;
always@(posedge clk) begin
if(tx_enable)
start<=start+1;
else
start<=0;
end
always@(posedge clk)
begin
if(start<2)
s<=cpol;
else if(sccount<1)
sccount<=sccount+1'b1;
else
begin
s<=~s;
sccount<=0;
end
end
assign sclk=s;

always@(posedge clk)
begin
case(state)
/////////////////////////
0: begin
if(tx_enable)
 begin
  if(!cpha) begin
    state <= 1;
    cs    <= 1'b0; 
    end
  else begin
    state <= 3;
    cs    <= 1'b0; 
    end
 end
else
state <= 0;
end
 
 
1: begin
if(count < 3) begin
count <= count + 1;
state <= 1;
mosi <= tx_data[bit_count];
end
else 
begin 
        count <= 0;
        if(bit_count>0)
        begin
        bit_count <= bit_count - 1;
        state <= 1;
        end
        else
        state <= 2;
end
end
 
2: begin
cs <= 1'b1;
bit_count <= 3'b111;
state <= 0;
mosi <= 1'bx;
end
 
 
3:
begin
state <= 4;
end
 
4:
begin
state <= 1;
end
 
 
endcase
end
 
 
endmodule