module fsm_spi(
    input wire clk,
    input wire rst,
    input wire tx_enable,
    output reg mosi,
    output reg cs,
    output wire sclk
);
 
    parameter idle = 0, tx_data = 1;
    reg state, next_state;
    
    reg [7:0] din = 8'hf6;
 
    reg spi_sclk = 0;
    reg [2:0] ccount = 0;
    reg [2:0] count = 0; // 0 -7 
    integer bit_count = 0;
    
    always@(posedge clk)
    begin
    if(!rst && tx_enable)
    begin
    if(ccount < 3)
      ccount <= ccount + 1;
    else
      begin
      ccount <= 0;
      spi_sclk <= ~spi_sclk;
      end
    end
    end
    
   //////////////////////////////////////// 
    always@(posedge sclk)
    begin
	if(rst)
	 state<=idle;
    	else
	 state<=next_state;
   end	
always@(posedge sclk)
     begin
    case(state)

     idle :
     begin
             mosi = 1'bx;
             cs   = 1'b1;
             if(tx_enable)begin
             next_state = tx_data;
	     cs=1'b0;
end		
             else
             next_state = idle;
     end
     
     tx_data : 
     begin
          
          if(bit_count != 8) begin
	  mosi = din[7-bit_count];
	  bit_count = bit_count+1;
	  next_state = tx_data;
          end
          else
          begin
	cs   = 1'b1;
          next_state = idle;
          mosi  = 1'bx;
          end
     end
    
     
     default :  next_state = idle;
     endcase
     end
   
 assign sclk = spi_sclk;
  
 endmodule